{
  "id" : 69646,
  "update_date" : "Apr 09, 2020 08:32:45 AM",
  "title" : "DJH Python kursus Pycharm",
  "items" : [
    {
      "id" : 337059,
      "title" : "Intro",
      "update_date" : "Apr 09, 2020 08:32:49 AM",
      "task_list" : [
        {
          "name" : "Hello world",
          "stepic_id" : 1215124,
          "update_date" : "Apr 09, 2020 08:32:51 AM",
          "files" : {
            "Hello_world.py" : {
              "name" : "Hello_world.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "print(\"Hallo, mit navn er     \")\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Hello_world import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Det skal nye programmøere skriv før de er klar til starte med at lære at programmere.</p>\n\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Kommentar",
          "stepic_id" : 1215125,
          "update_date" : "Apr 09, 2020 08:32:52 AM",
          "files" : {
            "Kommentar.py" : {
              "name" : "Kommentar.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "# Dette er en kommentar i Python filen Kommentar.py.\nprint(\"Denne line bliver printet på skærmen\") # Dete er kommentar efter noget kode.\n# Endnu en kommentar.\nprint(\"Skriv en kommentar efter denne line!!\")\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Kommentar import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Ved at sætte # ind, bliver teksten efter ikke oversat.</p>\n<p>Det er vigtigt at tilføje kommentar til sit program således andre bedre kan forstå hvad programmet virker!!!</p>\n<p>Tilføje en kommentar efter den sidste line i koden og oversat programmet.</p>\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Input",
          "stepic_id" : 1215126,
          "update_date" : "Apr 09, 2020 08:32:53 AM",
          "files" : {
            "Input.py" : {
              "name" : "Input.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "name = input(\"Hej, skriv dit navn?\")\n\nprint(\"Hej med dig\", name)\n\n# Indtast line med kommadoen input her!\n\n#print(\"Du er\",alder,\"år gamle\")\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Input import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Med kommandoen <strong>input</strong> er det muligt at indtaste tekst og tal ind som programmet kan benytte til manipulere.</p>\n<p>Tilføj en line hvor du indtaster din alder og fjern # så din alder bliver udskrevet på sidste line.</p></ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Print smart",
          "stepic_id" : 1215127,
          "update_date" : "Apr 09, 2020 08:32:54 AM",
          "files" : {
            "printsmart.py" : {
              "name" : "printsmart.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "print('''Dette\ner\nen \nsmart\nmåde\nat\nskrive til skærm på\n''')\nprint(\"Du kan også benytte \"\" til skrive tekst med\")\n\nprint('Dette'\n      ' er'\n      ' ikke')\n\n\n'''\nprint('Dette bliver ikke printet')\n'''\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..printsmart import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Her ses hvordan man kan printe på konsolen på en smart måde!!</p>\n<p>Oversæt programmet og se hvad der sker.</p>\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Opgave1",
          "stepic_id" : 1215128,
          "update_date" : "Apr 09, 2020 08:32:55 AM",
          "files" : {
            "Opgave1.py" : {
              "name" : "Opgave1.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Opgave1 import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<p>Så er det tid til en opgave.<p/>\n\n<p>Skriv en program der kan følgende ting:<p/>\n\n<li>Udskriv en besked af eget valg\n<li>Tilføj # efter den ovenstående besked\n<li>Udskriv en multiline streng\n<li>Udskriv med 3 dobbelt \"\"\"\n<li>Benyt kommadoen input til at udskrive et indtastet tal mellem 1-100\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320523,
      "type" : "lesson"
    },
    {
      "id" : 337060,
      "title" : "Variabler",
      "update_date" : "Apr 09, 2020 08:32:57 AM",
      "task_list" : [
        {
          "name" : "Variable definition",
          "stepic_id" : 1215129,
          "update_date" : "Apr 09, 2020 08:32:59 AM",
          "files" : {
            "Variable_definition.py" : {
              "name" : "Variable_definition.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "number = 1234\nprint(number)\n\na = b = 2\nprint(\"a = \", a )\nprint(\"b = \", b )\n\ngreetings = \"Hej\"\nprint(\"Hej = \", greetings)\ngreetings =  2\nprint(\"Hej = \", greetings)\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Variable_definition import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Nu skal vi til at se på hvad en variable er?</p>\n<p>Når man skriver et program er det en godt ide at oprette variabler.</p>\n<p>I et program sker det ofte at der referes til en bestemt variable. For at ungå at skrive det samme tal/ord flere gang referer man til en variable.\n</p>\n<p>Til referer til en variable benytte <strong>\"=\"</strong>. Se nedenfor!</p>\n<p>Navn = \"Lasse Kaae\"</p>\n<p>Nu kan man skrive print(Navn) også vil der stå Lasse Kaae på skræmen.</p>\n<P>I Python er muligt at skift variablen fra tekst til tal uden at oversætteren melder fejl!!!</P>\n<p> Andre programmeringssporg skal variablerne fastsættes i starten programmet og derefter kan de ikke ændres.</p>\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Udefinerede_variabler",
          "stepic_id" : 1215130,
          "update_date" : "Apr 09, 2020 08:33:00 AM",
          "files" : {
            "Udefinerede_variabler.py" : {
              "name" : "Udefinerede_variabler.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "12word1 = 'word'\n\nThere is day = 1\n\nvariable = 1\n\nprint(other_variable)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Udefinerede_variabler import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Variable navne kan kun indholde tal, bogstaver og underscore karakteren!! </p>\n<p> Dog må en variable ikke starte med et tal!!!</p>\n<p>Se hvad sker hvis du benytter et tal som første tegn en variable og en variable der ikke er defineret?</p>\n<p>Ret koden således den ikke fejler?</p>\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Lidt om variabler du ikke må bruge",
          "stepic_id" : 1215131,
          "update_date" : "Apr 09, 2020 08:33:01 AM",
          "files" : {
            "kwlist.py" : {
              "name" : "kwlist.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "# Liste over variabler du ikke skrive\nimport keyword\nprint(keyword.kwlist)\n\n\nis = 'Det virker ikke med sikkerhed' # Ændre is til Is\nprint(is)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..kwlist import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>keyword.kwlist er ord du ikke må benytte som variabler i Python.</p>\n\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Variable_type",
          "stepic_id" : 1215132,
          "update_date" : "Apr 09, 2020 08:33:02 AM",
          "files" : {
            "Variable_type.py" : {
              "name" : "Variable_type.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "print(float)\n\nBoolean = True\nprint(type(Boolean))\n\nlist_of_words = ['word','yet another words']\nprint(type(list_of_words))\n\ndictionary = {'a':1,'b':2}\nprint(type(dictionary))\n\ntupl = (1,2,3,4,5)\nprint(type(tupl))\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Variable_type import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Python tillader at oprette mange forskellige typer af objekter.</p>\n<p>Køre scriptet. Udskriften på skærm vil list de fleste typer af variabler.</p>\n<p>Der følgende typer:</p>\n<p>String - Al tekst skal have \" \" omkring sig <p/>\n<p>Integer - Hele tal 1,2,3... <p/>\n<p>Float - Decimaltal 1,876 <p/>\n<p>List - Indeholde flere data <p/>\n<P<Tuple - Immutable container for data <p/>\n<p>Dictionary - Ordbog <p/>\n<p>Booleans - Har to tilstande true eller false<p/>\n</p>\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Type konvertering",
          "stepic_id" : 1215133,
          "update_date" : "Apr 09, 2020 08:33:02 AM",
          "files" : {
            "Type_konvertering.py" : {
              "name" : "Type_konvertering.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "number = 9\nprint(type(number))   # print type of variable \"number\"\n\nfloat_number = 9.82\nprint(float_number)\nprint(Convert float_number to integer)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Type_konvertering import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "Test konverting af.py" : {
              "name" : "Test konverting af.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "numer = input(\"Indtast et float tal  \")\n\nprint(numer*2)\n\nnumer = float(numer)\n\nprint(numer*2)\n\n#Konverter numer til et Integer?\n# og skriv det ud på konsolen, test om det er integer du skriver ud?\n\n#Konverter numer tilbage et string?\n# og skriv det ud på konsolen, test om det er integer du skriver ud?\n"
            }
          },
          "description_text" : "<html>\n<p>Det er muligt at konvertere fra en data type til en anden ved hjælp af indbyggede funktioner.</p>\n\n<li>int(x) konverterer x til en integer.</li>\n<li>float(x) konverterer x til et floating-point tal. </li>\n<li>str(x) konverterer object x til en string representation. </li>\n\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Matematiske operander",
          "stepic_id" : 1215134,
          "update_date" : "Apr 09, 2020 08:33:06 AM",
          "files" : {
            "Matematiske_operander.py" : {
              "name" : "Matematiske_operander.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "a1=1\na2=2\nb1=10\nb2=20\n\nprint(a1+a2)\n\nprint(\"a1*a2=\",a1*a2)\n\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Matematiske_operander import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Ligesom alle andre programmerings sprog:<p/>\n<li>the addition ( +)</li>\n<li>subtraction ( -)</li>\n<li>multiplication ( *)</li>\nog division ( /) operators kan bruges med tal.\n<p>Derudover har Python potens ( **) og modulus ( %) operanden.<p/>\n<p>Læs mere om matematiske funktioner her: </p><a>href=https://www.w3schools.com/python/python_operators.as</a>\n<p>Opgaver:</p>\n<li>Dividere a1 og b1 og print resultat på skærm</li>\n<li>Træk a2 fra b2 og print på skærm</li>\n<li>Læg a1 og a2 og b1 og b2 sammen og udskriv på skærm</li>\n<li>a2 i anden potens</li>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Assignments",
          "stepic_id" : 1215135,
          "update_date" : "Apr 09, 2020 08:33:06 AM",
          "files" : {
            "Assigments.py" : {
              "name" : "Assigments.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "number = 9.0\nprint(\"number = \" + str(number))\n\nnumber -= 2\nprint(\"number = \" + str(number))\n\n\nnumber = 9.0\nthe_same_number = number - 2\nprint(\"the_same_number = \" + str(number))\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Assigments import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Augmented assignment er en enkel operation som bruges i forbindelse med binær operationer.\n+=\n-=\nosv.</p>\n<li>Tilføje en line som gør at det endelige resultat bliver 12.0</li>\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Boolean operander",
          "stepic_id" : 1215136,
          "update_date" : "Apr 09, 2020 08:33:08 AM",
          "files" : {
            "Booleans_operators.py" : {
              "name" : "Booleans_operators.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "to = 2\ntre = 3\n\ner_lige_med = to operator tre\n\nprint(er_lige_med)\n\nprint(not er_lige_med)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Booleans_operators import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>En boolsk udtryk (eller logisk udtryk) undersøger om en påstand er sand(true) eller falsk(falsk).\nPython benytter de booleske typer True eller False.\n<strong>not</strong> keyword benyttes til invertere en boolsk type.</p>\n<li>Undersøg om 10 er lig med 12 er <strong>true</strong> eller <strong>false</strong>.</li>\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Samligns operander",
          "stepic_id" : 1215137,
          "update_date" : "Apr 09, 2020 08:33:09 AM",
          "files" : {
            "samlign_operators.py" : {
              "name" : "samlign_operators.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "en = 1\nto = 2\ntre = 3\n\nprint(en < to < tre)  # This chained comparison means that the (one < two) and (two < three) comparisons are performed at the same time.\n\ner_større = tre > to\nprint(er_større)\n\nprint((en > to) or (to < tre))\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..samlign_operators import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "samlign.jpg" : {
              "name" : "samlign.jpg",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Python har flere typer af samlignings operatørere:\n>=, <=, <, > osv.\nAlle operatørere har samme prioritet.</p>\n\n<li>Opgave: benyt 3 forskellige boolske operanter.</li>\n<img src=\"samlign.jpg\" alt=\"\" />\n/ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Opgave2",
          "stepic_id" : 1215138,
          "update_date" : "Apr 09, 2020 08:33:10 AM",
          "files" : {
            "Opgave.py" : {
              "name" : "Opgave.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "a = 11\nb = 12\nis = 13\nand= 14\n\nprint(\"a > is\",a > is)\nprint(\"b < a =\",b < a)\n\nc= a + b\ne= and - is\n\nprint(\"Er c større end  e \", c operant e)\nc +=\n\n\n\n\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Opgave import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "Opgave2.py" : {
              "name" : "Opgave2.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "a = int(input(\" indtast hel tal mellem 0 og 10\"))\n#b = input(\"indtast hel tal mellem 20 og 30\")\nb = 33\nc = a + b\nprint(\"c =\", c)\n\n\n\n\n\n"
            },
            "Opgave3.py" : {
              "name" : "Opgave3.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "navn = input(\"Indtast dit navn?\")\nalder = input(\"Indtast din alder?\")\n\n#Print en tekst ud som ser sådan feks: Dit navn er lasse og du er 45 år\nprint()\n"
            },
            "Opgave4.py" : {
              "name" : "Opgave4.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "d = float(input(\"Indtast et komma tal mellem 10 og 30?\"))\ne = int(input(\"Indtast et tal mellem 5 og 10?\"))\nf = d * e\n#Udskriv f som et heltal.\nprint(f)\n"
            }
          },
          "description_text" : "<html>\n<p>Opgave i variabler:\nFærdiggøre Python programmet, så det kommer til virke uden fejl og tilføj derefter følgende:\n<li>Læg 4 til c og gang c med sig selv, print resultatet ud.</p>\n\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320524,
      "type" : "lesson"
    },
    {
      "id" : 337061,
      "title" : "Strings",
      "update_date" : "Apr 09, 2020 08:33:11 AM",
      "task_list" : [
        {
          "name" : "Konkatenering",
          "stepic_id" : 1215139,
          "update_date" : "Apr 09, 2020 08:33:13 AM",
          "files" : {
            "Konkatenering.py" : {
              "name" : "Konkatenering.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "måned = 'Januar'\ndag = 23\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Konkatenering import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Konkatenering betyder at lægge to tekst stringe sammen.</p>\n<li><strong>Opgave:</strong> Udskriv de to variabler måned og dag i en ny variable der hedder Hej og derefter udskriv den således at der kommer til stå Januar 23 på skærmen.</li></ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Len_funktion",
          "stepic_id" : 1215140,
          "update_date" : "Apr 09, 2020 08:33:14 AM",
          "files" : {
            "Len_funktionen.py" : {
              "name" : "Len_funktionen.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "phrase = \"\"\"\nIt is a really long string\ntriple-quoted strings are used\nto define multi-line strings\n\"\"\"\nprint(\"Phrase er\",int(len(phrase)),\"karakterer lang.\")\nprint(phrase)\n\nfirst_half = phrase[:int(len(phrase)/2)]\n\nprint(first_half)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Len_funktionen import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Len() funktionen tæller antal karakterer i en streng.</p>\n\n</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320525,
      "type" : "lesson"
    },
    {
      "id" : 337063,
      "title" : "Opgaver",
      "update_date" : "Apr 09, 2020 08:33:15 AM",
      "task_list" : [
        {
          "name" : "Opgave 1",
          "stepic_id" : 1215142,
          "update_date" : "Apr 09, 2020 08:33:17 AM",
          "files" : {
            "Opgave1.py" : {
              "name" : "Opgave1.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "width = 17\nheight = 12.0\n\n\nwidth/2\n\nwidth/2.0\n\nheight/3\n\n1 + 2 * 5\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Opgave1 import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>For hver af udtrykene, skal du udskrive dem på skærm og udskriv hvilken type de er?</p></ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Opgave 2",
          "stepic_id" : 1215143,
          "update_date" : "Apr 09, 2020 08:33:18 AM",
          "files" : {
            "Opgave2.py" : {
              "name" : "Opgave2.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Konvertere celsius til farhenheit\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Opgave2 import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Skriv et program hvor brugeren indtast en celsius temperatur og printer det som en Fahrenheit temperatur?</p></ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Opgave 3",
          "stepic_id" : 1215144,
          "update_date" : "Apr 09, 2020 08:33:19 AM",
          "files" : {
            "Opgave3.py" : {
              "name" : "Opgave3.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "import datetime\n\nx = datetime.datetime.now()\n\nprint(x.year)\n\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Opgave3 import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Lav et program hvor brugeren skal indtaste sit navn og fødselsår, hvorefter skal der udskrives: \"Hej xxxx, du må være ´xx år gamle!</p>\n<p>De 3 liner i opgave 3 giver dig hvilket år der er i dag.</p></ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320526,
      "type" : "lesson"
    },
    {
      "id" : 337064,
      "title" : "Betingelser",
      "update_date" : "Apr 09, 2020 08:33:20 AM",
      "task_list" : [
        {
          "name" : "Booelske operatore",
          "stepic_id" : 1215145,
          "update_date" : "Apr 09, 2020 08:33:23 AM",
          "files" : {
            "Booleske_operatore.py" : {
              "name" : "Booleske_operatore.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "navn = \"John\"\nalder = 17\n\nprint(navn == \"John\" or alder == 17)    # checks om navn er lig \"John\" OR alder er lig  17\n\nprint(John is not 23 years old)\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Booleske_operatore import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Boolekse operanter samligner udsagn og returner en boolesk værdi. Den booleske operant <strong>and</strong> returner true hvis begge udsagn er sande.</p></ul>\n  <p>Den booleske operant <strong>or</strong> returnere true, når en af de to udsagn er sande.</p>\n<p>Den booleske operant <strong>not</strong> invertere det booleske udsagn det tilknyttet.</p>\n<li>Ændre den sidste linie således der udskrive true, når programmet køres!</li></html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Booleske orden",
          "stepic_id" : 1215146,
          "update_date" : "Apr 09, 2020 08:33:24 AM",
          "files" : {
            "Booleske_orden.py" : {
              "name" : "Booleske_orden.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "navn = \"John\"\nalder = 17\n\nprint(navn == \"John\" or not alder > 17)\n\nprint(navn == \"John\" or not alder > 17)\n\nprint(\"Navn\" is \"Ellis\" or not (\"navn\" equal \"John\" and han er 17 år gamle))\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Booleske_orden import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Booleske operatore evaluere ikke fra venstremod højre, men <strong>not</strong> er først evalueret</p></ul>\n</html> derefter <strong>and</strong> og til sidst <strong>or.</strong>\n<li>Få den sidste line til virker?</li>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "If_statement",
          "stepic_id" : 1215147,
          "update_date" : "Apr 09, 2020 08:33:24 AM",
          "files" : {
            "if_statement.py" : {
              "name" : "if_statement.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "navn = \"John\"\nalder = 17\n\nif navn == \"John\" or alder == 17:   # Undersøg om navnet er \"John\" eller alderen er 17. I Så udskriv 2 liner.\n    print(\"navnet er John\")\n    print(\"John er 17 år gamle\"\n          \"\")\n\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..if_statement import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p><strong>if</strong> kommandoen benyttes til at undersøge et udsagn for om det sand eller falsk. Hvis det er sandt udskrives de efterfølgende liner som er rykket ind.</p>\n<li>Lig med: a == b\n<li>Ikke lig med: a != b\n<li>Mindre end: a < b\n<li>Mindre end eller lig med: a <= b\n<li>Større end: a > b\n<li>Større end eller lig med: a >= b</ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Else, elif del af if statement",
          "stepic_id" : 1215148,
          "update_date" : "Apr 09, 2020 08:33:26 AM",
          "files" : {
            "else_elif.py" : {
              "name" : "else_elif.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "x = 28\n\nif x < 0:\n    print('x < 0')                      # Udføre linien hvis if x < 0\nelif x == 0:\n    print('x is zero')                 # Hvis det ikke er sandt at x < 0, check hvis x == 0\nelif x == 1:\n    print('x == 1')                    # Hvis det ikke er sandt at x < 0 and x != 0, check hvis x == 1\nelse:\n    print('non of the above is true')\n\nnavn = \"John\"\n\ncheck if navn lig med \"John\"\n    print(True)\nelse\n    print(False)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..else_elif import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p><strong>else</strong> er en tilføjelse til <strong>if</strong>. <strong>elif</strong> står for  \"else if\".</p>\n<p><strong>elif</strong> benyttes til at undersøge flere udsagn efter hinanden.\nEr det første udsagn sand, bliver resten ikke undersøgt.\nEr det første udsagn falsk undersøger <strong>elif</strong> om det er sandt osv.</p></ul>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Opgave1",
          "stepic_id" : 1215149,
          "update_date" : "Apr 09, 2020 08:33:26 AM",
          "files" : {
            "Opgave1.py" : {
              "name" : "Opgave1.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "tal = int(input(\"Indtast et positivt eller negativt tal \"))\n\nif\n\nelif\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Opgave1 import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Undersøg om et tal er positvit eller negativt?</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Opgaver2",
          "stepic_id" : 1215150,
          "update_date" : "Apr 09, 2020 08:33:27 AM",
          "files" : {
            "Opgave2.py" : {
              "name" : "Opgave2.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "tal1 = int(input(\"Indtast første tal\"))\ntal2 = int(input(\"Indtast andet tal\"))\n\nif tal1 større end tal2:\n    print(\"\")\nelif tal1 mindre end tal2:\n    print(\"\")\nelif tal1 lig med tal2:\n    print(\"\")\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Opgave2 import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Indtast 2 tal og undersøg om de er større end eller mindre end eller lig med hinanden?</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Opgave3",
          "stepic_id" : 1215151,
          "update_date" : "Apr 09, 2020 08:33:28 AM",
          "files" : {
            "Opgave3.py" : {
              "name" : "Opgave3.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Dette er nested if, en if inden i en if\n#Undersøg hvordan det virker\n\nx = 41\n\nif x > 10:\n  print(\"Tallet er over 10\")\n  if x > 20:\n    print(\"og over 20!\")\n  else:\n    print(\"men ikke over 20.\")\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Opgave3 import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Dette er en nested if, en <strong>if</strong> inden i en <strong>if </strong>.\nUndersøg hvordan det virker?</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320528,
      "type" : "lesson"
    },
    {
      "id" : 337065,
      "title" : "Loops",
      "update_date" : "Apr 09, 2020 08:33:29 AM",
      "task_list" : [
        {
          "name" : "For loop",
          "stepic_id" : 1215152,
          "update_date" : "Apr 09, 2020 08:33:31 AM",
          "files" : {
            "for_loop.py" : {
              "name" : "for_loop.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "for i in range(5):    # for hver tal mellem 0-4. range(5) functionen returner listen [0, 1, 2, 3, 4]\n    print(i)          # Denne line udkrives 5 gange. Første gang udskrives 0, så 1, ...\n\n\nprimes = [2, 3, 5, 7]   # create new list\n\niterate over primes using for loop\n    print(prime)\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..for_loop import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "Eks1.py" : {
              "name" : "Eks1.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "for x in \"banana\":\n  print(x)\n"
            },
            "Eks2.py" : {
              "name" : "Eks2.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Debug denne file!\n\nfor x in range(2, 6):\n  print(x)\n\nprint(\"Ny løkke\")\n\nfor x in range(2, 30, 3):\n  print(x)\n"
            },
            "Eks3.py" : {
              "name" : "Eks3.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Debug denne Python file og se hvad der sker inden i løkkerne?\n\nfor x in range(10, 110, 10):\n    for y in range(10, 110, 10):\n        print(x*y)\n"
            }
          },
          "description_text" : "<html>\n<strong>for</strong> løkker benyttes til at gennemløbe en tal række, eks. 0 til 4.\n\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "For loops med tekst",
          "stepic_id" : 1215153,
          "update_date" : "Apr 09, 2020 08:33:32 AM",
          "files" : {
            "Loops_tekst.py" : {
              "name" : "Loops_tekst.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "hello_world = \"Hello, World!\"\n\nfor ch in hello_world:    # print each character from hello_world\n    print(ch)\n\nlength = 0      # initialize length variable\n\nfor x in hello_world:\n    length += 1     # add 1 to the length on each iteration\nprint(length)\n\nprint(len(hello_world))\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Loops_tekst import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Her er et eksemple på hvordan tekst strenge kan benytte i en for loop.</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "While loop",
          "stepic_id" : 1215154,
          "update_date" : "Apr 09, 2020 08:33:33 AM",
          "files" : {
            "While_loop.py" : {
              "name" : "While_loop.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "square = 1\n\nwhile square <= 10:\n    print(square)    # Denne kode bliver gennemløbet 10 gange\n    square += 1      # Denne kode bliver gennemløbet 10 gange\n\nprint(\"Færdig\")  # Denne line er ikke i while loopen\n\n\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..While_loop import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "Opgave1.py" : {
              "name" : "Opgave1.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Udskriv alle de kvardratiske tal mellem 0 og 99, ved hjælp af while\n\nsquare = 0\nnumber = 1\n\nprint all squares from 0 to 99\n    square = number ** 2\n    print(square)\n    number += 1\n"
            }
          },
          "description_text" : "<html>\n<p>En <strong>while</strong> loop minder om en <strong>if</strong> kommando. Den gennemføre de eller de nedenstående liner så længe en betingelse er opfyldt.\n</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Break keyword",
          "stepic_id" : 1215155,
          "update_date" : "Apr 09, 2020 08:33:34 AM",
          "files" : {
            "break_keyword.py" : {
              "name" : "break_keyword.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "count =0\n\nwhile True:  # Den er altid sand!!\n    print(count)\n    count += 1\n    if count >= 5:\n        break           # Loopen stoppe hvis count >= 5\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..break_keyword import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>En uendelig løkke vil ikke stoppe, så  det nødvendigt at benytte et <strong>break</strong> til at stoppe løkken.</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Continue_keyword",
          "stepic_id" : 1215156,
          "update_date" : "Apr 09, 2020 08:33:38 AM",
          "files" : {
            "Continue.py" : {
              "name" : "Continue.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "for i in range(5):\n    if i == 3:\n        continue   # Hopper over i==3, den bliver ikke udskrevet\n    print(i)\n\nfor x in range(10):\n    if Check if x is even:\n        continue   # hop over print(x) for denne loop\n    print(x)\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Continue import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p><strong>continue</strong> kommandoen bliver brugt til at hoppe over den restrende kode i løkken og derefter forsætte i løkken igen.</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320529,
      "type" : "lesson"
    },
    {
      "id" : 337066,
      "title" : "Funktioner",
      "update_date" : "Apr 09, 2020 08:33:38 AM",
      "task_list" : [
        {
          "name" : "Funktioner",
          "stepic_id" : 1215157,
          "update_date" : "Apr 09, 2020 08:33:40 AM",
          "files" : {
            "Funktioner.py" : {
              "name" : "Funktioner.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "def hello_world():  # funktions navn\n    print(\"Hello, World!\")\n\nfor i in range(5):\n    hello_world()   # Kalder funktioner hello_world 5 gange\n\nprint('Jeg vil være en funktion')\nprint('Jeg vil være en funktion')\nprint('Jeg vil være en funktion')\n\n\nDefinere funktions navnet 'fun' tog udskift de 3 liner ovnen over\n    print('Jeg vil være en funktion')\n\nfor i in range(3):\n    fun()\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Funktioner import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Funktioner er nytte fuld måde at dele sin kode på i blokke, så den bliver nemmere at læse og kan genbruges. Funktioner defineres med nøgleordet <strong>def</strong> efterfulgt at navnet på funktionen.\n<li>Lav en funktion der udskifter de 3 liner.</li></p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Parametre",
          "stepic_id" : 1215158,
          "update_date" : "Apr 09, 2020 08:33:41 AM",
          "files" : {
            "Parametre.py" : {
              "name" : "Parametre.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "def foo(x):                 # x er en parameter\n    print(\"x = \" + str(x))\n\nfoo(5)   # Her overføres tallet 5 til foo funktionen\n\ndefinere en funktion med navnet 'square' som udskriver kvadratet af tallet i parantesen\n    print(x ** 2)\n\nsquare(4)\nsquare(8)\nsquare(15)\nsquare(23)\nsquare(42)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Parametre import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Funktionens parametre bliver defineret i parantesen. Parameteren opføre sig som en variable til argumentet i funktionen.\n<li>Definer en funktion som beregner kvadratet af det tal der bliver overført til funktionen.</li></p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Returnere værdi",
          "stepic_id" : 1215159,
          "update_date" : "Apr 09, 2020 08:33:42 AM",
          "files" : {
            "return_keyword.py" : {
              "name" : "return_keyword.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "def sum_two_numbers(a, b):\n    return a + b            # returnere summen af de 2 tal a, b\n\nc = sum_two_numbers(3, 12)  # variablen c tildeles summen af a og b\n\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..return_keyword import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "Opgave1.py" : {
              "name" : "Opgave1.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "def fib(n):\n    \"\"\"This is documentation string for function. It'll be available by fib.__doc__()\n    Return a list containing the Fibonacci series up to n.\"\"\"\n    result = []\n    a = 1\n    b = initialize variable b\n    while a < n:\n        result.append(a)\n        tmp_var = b\n        update variable b\n        update variable a\n    return result\n\nprint(fib(10))\n"
            }
          },
          "description_text" : "<html>\n<p>Funktioner kan returne en værdi til den der spørger til funktionen, ved at benytte nøgleordet <strong>return</strong>\n. Derefter kan værdien tildeles en variable og udskrives.</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320530,
      "type" : "lesson"
    },
    {
      "id" : 337067,
      "title" : "Moduler og pakker",
      "update_date" : "Apr 09, 2020 08:33:43 AM",
      "task_list" : [
        {
          "name" : "Import modul",
          "stepic_id" : 1215160,
          "update_date" : "Apr 09, 2020 08:33:45 AM",
          "files" : {
            "mit_modul.py" : {
              "name" : "mit_modul.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\"\"\" Dokumentationen for mit_modul.py som ineholder funktionen hello_world\n\"\"\"\n\n\ndef hello_world(name):\n    print(\"Hello, World! Mit navn er\",name)\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..mit_modul import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "config.py" : {
              "name" : "config.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "# Husk at ændre opstætning af Googlemail, således eksterne App får lov til sende beskeder!!!!\n# Indtast Google mail konto navn nedenfor\nEMAIL_ADDRESS=\"******@gmail.com\"\n# Indtast password til Googlekonto\nPASSWORD=\"**********\"\n# Indtast modtages Google mail konto navn nedenfor\nEMAIL_ADDRESS_rx=\"****************\"\n"
            },
            "emailsent.py" : {
              "name" : "emailsent.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "import smtplib\nimport config\n\ndef send_email(subject, msg):\n    try:\n        server=smtplib.SMTP(\"smtp.gmail.com\",587)\n        server.ehlo()\n        server.starttls()\n        server.login(config.EMAIL_ADDRESS, config.PASSWORD)\n        message = \"Subject: {}\\n\\n{}\".format(subject,msg)\n        server.sendmail(config.EMAIL_ADDRESS,config.EMAIL_ADDRESS_rx, message)\n        server.quit()\n        print(\"Mail sendt med succes\")\n\n    except:\n        print(\"Fejl mail ikke sendt\")\n\n\nsubject =\"Test\"\nmsg=\"Hej med dig\"\nsend_email(subject, msg)\n"
            }
          },
          "description_text" : "<html>\n<p>Moduler i Python er Python filer med extension .py som indeholder definitioner og statement.\nModuler er praktiske når der er funktioner som kan benyttes i flere programmer. På den måde skal der ikke kopies kode til hvert program.</p>\n<p>Modul importes vedhjælp af nøgleordet <strong>import</strong>.</p>\n<li>Importere modulet mit_modul og kald funktionen hello_world.</li>\n\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Standard moduler",
          "stepic_id" : 1215162,
          "update_date" : "Apr 09, 2020 08:33:46 AM",
          "files" : {
            "Standar_moduler.py" : {
              "name" : "Standar_moduler.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "import datetime\n# https://docs.python.org/3/library/datetime.html?highlight=date#module-datetime\n\nprint(datetime.datetime.now())\nx=datetime.datetime.now()\n\nprint(\"Året er:\",x.year)\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Standar_moduler import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "random_modul.py" : {
              "name" : "random_modul.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\nimport random\n\n# https://docs.python.org/3/library/random.html\nfor i in range(12):\n    x=random.randrange(1,9)\n    y=random.randrange(3)\n    print(\"Mellem 1 og 9\",x)\n    print(\"Mellem 0 og 3\",y)\n"
            },
            "tid.py" : {
              "name" : "tid.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "import time\n# https://docs.python.org/3/library/time.html?highlight=time#module-time\ntid=2\nprint(\"Lasse\")\ntime.sleep(tid)\nprint(\"Lasse\")\ntime.sleep(tid)\nprint(\"Lasse2\")\n"
            },
            "Matematikmodul.py" : {
              "name" : "Matematikmodul.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "import math\n# https://docs.python.org/3/library/math.html?highlight=math#module-math\nx=math.pi\nprint(x)\nx=math.trunc(10.53)\nprint(x)\nx=math.sin(45)\nprint(x)\nx=math.pow(2,2)\nprint(x)\nx=math.sqrt(9)\nprint(x)\n"
            }
          },
          "description_text" : "<html>\n<p>I Python er det et hav af standard biblioteker. Husk man kan trykke på Ctrl+mellemrum efter . så vil mulighederne komme på skærmen.</p>\n Men læs om moduler først!!</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320531,
      "type" : "lesson"
    },
    {
      "id" : 337069,
      "title" : "Opgave 2",
      "update_date" : "Apr 09, 2020 08:33:48 AM",
      "task_list" : [
        {
          "name" : "Opgaver",
          "stepic_id" : 0,
          "update_date" : "Jan 01, 1970 12:00:00 AM",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..task import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "Effektberegner.py" : {
              "name" : "Effektberegner.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Lav et program der beregner strømmen i et kabel og finder det rette kvadrat\n\nP = int(input(\"Indtast effektforbrug på brugsgenstanden\"))        # Indtast effektforbruget\nU = 230                 # Spændingen er på 230V\nI = P/U                 # Beregner strømmen\nprint(str(I)+\" A\")      # skriver amperer\n\ntaller=int(input(\"Skal der benyttes 70c kabel(tast 0) 90c kabel (tast 1)\"))\n#Taller bruges til checke om programmet skal stoppe(1) eller forsæt\n"
            },
            "lkaae_modul.py" : {
              "name" : "lkaae_modul.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "# Dette er et modul til brug i andre Python programmer\n#Lav et program der kalder dette modul\n\ndef lkaae_test(x):\n    x+=5\n    print(x)\n\ndef lkaae_test2(x):\n    x*=2\n    print(x)\n\ndef lkaae_test3(x):\n    x**=4\n    print(x)\n"
            },
            "Menu_program.py" : {
              "name" : "Menu_program.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Lav et menu program med 3 punkter i\n# 1) Frem\n# 2) Tilbage\n# 3) Stop\n\nvalg =0\n\ndef menu():\n    print(\"1) Frem, 2) Tilbage, 3) Stop\")\n    valg=int(input(\"Indtast dit valg?\"))\n\nmenu()\n\nwhile valg==1:\n    print(\"Du har valgt menu nr. 1\")\n    menu()\n\nwhile valg==2:\n\nwhile valg==3:\n\n    break\n"
            },
            "Ohmslov.py" : {
              "name" : "Ohmslov.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Lave et program der udregner ohm lov i alle kombinationer!\n"
            },
            "Regnemaskine.py" : {
              "name" : "Regnemaskine.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "# Lav et Regnemaskine program?\n#De 4 regnearter skal kaldes via funktioner\n#Udfyld resten så programmet kommer til virke\n\ndef Plus(x,y):\n    resultat =x+y\n    return resultat\n\ndef Minus(x,y):\n\n\ndef Gange(x,y):\n\n\ndef Divider(x,y):\n\n\ndef menu():\n    print(\"Tast 1(+), 2(-), 3(*), 4(/), 5(slut)\")\n\nmenu()\nMenutal = int(input(\"tast tal nu!!\"))\n\nwhile Menutal==1:\n    print(\"Nu skal der lægges sammen(+)!\")\n    tal1=float(input(\"Indtast det første tal?\"))\n    tal2=float(input(\"Indtast det andet tal?\"))\n    print(\"Resultatet af\",tal1,\"+\",tal2,\"=\",Plus(tal1, tal2))\n    print()\n    menu()\n    Menutal = int(input(\"tast tal nu!!\"))\n\nwhile Menutal==2:\n\n\nwhile Menutal==3:\n\n\nwhile Menutal==4:\n\n\n\nwhile Menutal==5:\n    print(\"Slut!!!!!!!\")\n    break\n"
            }
          },
          "description_text" : "<html>\n<p><li>Her nogle opgaver.</li></p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320533,
      "type" : "lesson"
    },
    {
      "id" : 337070,
      "title" : "Statemachine",
      "update_date" : "Apr 09, 2020 08:33:50 AM",
      "task_list" : [
        {
          "name" : "Statemachine",
          "stepic_id" : 1215163,
          "update_date" : "Apr 09, 2020 08:33:54 AM",
          "files" : {
            "Random_statemachine.py" : {
              "name" : "Random_statemachine.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from random import random\nfrom time import sleep\n\ndef lysgreen():\n    print (\"Grøn:\")\n        # Sleep er en forsinkelse af programmet\n    sleep(1.5)\n    tal=random()\n    if tal>.5:\n        return lysyellow()\n    else:\n        return lysred()\n\ndef lysyellow():\n    print (\"Gul:\")\n    # Sleep er en forsinkelse af programmet\n    tal=random()\n    if tal>.5:\n        return lysgreen()\n    else:\n        return lysred()\n\ndef lysred():\n    print (\"Rød:\")\n    # Sleep er en forsinkelse af programmet\n    sleep(1.5)\n    tal=random()\n    if tal>.2:\n        return lysgreen()\n    else:\n        return None\n\nlys=lysgreen()    # initial state\nwhile lys: lys=lys()  # launch state machine\nprint (\"Done with states\")\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Random_statemachine import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "Simpel_statemachine.py" : {
              "name" : "Simpel_statemachine.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Program til at skifte mellem states\nfrom random import random\nfrom time import sleep\n\ndef state0():\n    print (\"state0\")\n        # Sleep er en forsinkelse af programmet\n    sleep(1.5)\n    if random()>=.5:\n        return state1\n    else:\n        return state2\n\ndef state1():\n    print (\"state1\")\n    # Sleep er en forsinkelse af programmet\n    sleep(1.5)\n    if random()>=.5:\n        return state0\n    else:\n        return state2\n\ndef state2():\n    print (\"state2\")\n    # Sleep er en forsinkelse af programmet\n    sleep(1.5)\n    if random()>.2:\n        return state0\n    else:\n        return None\n\nstate=state0    # initial state\nwhile state: state=state()  # launch state machine\nprint (\"Done with states\")\n"
            }
          },
          "description_text" : "<html>\n<p>En statemachine er måde at beskrive komplicerede strukturere på en simple måde.</p>\nDette eksemple viser et program med 3 states, hvor en random generator afgøre hvilket state der skal hoppes til.\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Livets_gang",
          "stepic_id" : 1215164,
          "update_date" : "Apr 09, 2020 08:33:55 AM",
          "files" : {
            "Livets_gang_evighed.py" : {
              "name" : "Livets_gang_evighed.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Statemachine til beskrivelse af livets gang\nimport time\n\ndef Home(x):\n\n    if x==\"wake\":\n        x=\"take train\"\n        print(\"Tager toget på arbejde\")\n        time.sleep(tid)\n        return Work(x)\n    elif x==\"take train\":\n        x=\"sleep\"\n        print(\"Går i seng\")\n        time.sleep(tid)\n        return Bed(x)\n\ndef Work(x):\n\n\ndef Bed(x):\n\n\n\nstate=Home(x=\"wake\")\nwhile state: state=Home(x=\"wake\")\nprint(\"Død og færdig!!!!\")\n\n\n\n\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Livets_gang_evighed import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "solution.py" : {
              "name" : "solution.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Statemachine til beskrivelse af livets gang\nimport time\n\ny=0\ntid=1\n\ndef Home(x):\n    global y\n    global tid\n    y=y+1\n    print(\"Y=\"+str(y))\n    if y==50:\n        return\n    if x==\"wake\":\n        x=\"take train\"\n        print(\"Tager toget på arbejde\")\n        time.sleep(tid)\n        return Work(x)\n    elif x==\"take train\":\n        x=\"sleep\"\n        print(\"Går i seng\")\n        time.sleep(tid)\n        return Bed(x)\n\ndef Work(x):\n    if x==\"take train\":\n        x=\"take train\"\n        print(\"Tager toget hjem fra arbejde\")\n        time.sleep(tid)\n        return Home(x)\n\ndef Bed(x):\n    if x==\"sleep\":\n        x=\"wake\"\n        print(\"Vågner\")\n        time.sleep(tid)\n        return Home(x)\n\n\nstate=Home(x=\"wake\")\nwhile state: state=Home(x=\"wake\")\nprint(\"Død og færdig!!!!\")\n\n\n\n\n"
            },
            "Livets_gang_begrænset.py" : {
              "name" : "Livets_gang_begrænset.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#Statemachine til beskrivelse af livets gang\nimport time\n\ny=0\ntid=1\n\ndef Home(x):\n    global y\n    global tid\n#Lav en tæller som stoppet livet!!!\n    if x==\"wake\":\n        x=\"take train\"\n        print(\"Tager toget på arbejde\")\n        time.sleep(tid)\n        return Work(x)\n    elif x==\"take train\":\n        x=\"sleep\"\n        print(\"Går i seng\")\n        time.sleep(tid)\n        return Bed(x)\n\ndef Work(x):\n\n\ndef Bed(x):\n\n\n\nstate=Home(x=\"wake\")\nwhile state: state=Home(x=\"wake\")\nprint(\"Død og færdig!!!!\")\n\n\n\n\n"
            }
          },
          "description_text" : "<html>\n<p>Livets_gang_evighed.py er et program der viser livet ved hjælp af 3 states.</p>\n<li>Færdigøre programmet så det viser en person der står op om morgen går på arbejde tager hjem gå i seng og står op igen osv.</li>\n<li>Livets_gang_begrænset.py skal statemachinen have en begrænsning så efter et antal genneme af statene stopper programmet.</li>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Lyskryds",
          "stepic_id" : 1215165,
          "update_date" : "Apr 09, 2020 08:33:56 AM",
          "files" : {
            "Lyskrydsopg.py" : {
              "name" : "Lyskrydsopg.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "from random import random\nfrom time import sleep\n\n\ndef state0():\n    print ('\\x1b[7;32;40m' + \"Grøn! Kør\" + '\\x1b[0m')\n    sleep(5.5)\n    return state1\n\ndef state1():\n    print ('\\x1b[6;30;43m' + \"Gul! stop\" + '\\x1b[0m')\n    sleep(1.5)\n    return state2\n\ndef state2():\n    print ('\\x1b[6;30;41m' + \"Rød! stop\" + '\\x1b[0m')\n    sleep(5.5)\n    return state0\n\nstate=state0    # initial state\nwhile state: state=state()  # starter statemachine\nprint (\"Done with states\")\n\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..Lyskrydsopg import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            },
            "tl.png" : {
              "name" : "tl.png",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Her er der vist en måde at skrive med farver i Python</p>\n<li>Lav et lyskryds med syd/nord og Øst/vest lys. Hvor mange states skal der benyttes?</li>\n<img src=\"tl.png\" alt=\"\" />\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320534,
      "type" : "lesson"
    },
    {
      "id" : 337071,
      "title" : "File_write",
      "update_date" : "Apr 09, 2020 08:33:57 AM",
      "task_list" : [
        {
          "name" : "File_write",
          "stepic_id" : 1215166,
          "update_date" : "Apr 09, 2020 08:33:59 AM",
          "files" : {
            "File_write.py" : {
              "name" : "File_write.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "#https://www.tutorialspoint.com/python/python_files_io.htm\nif __name__ == \"__main__\":\n    File_navn=input(\"indtast navnet på filen, med ekstensions!\")\n    f = open(File_navn, \"w\") #Filen oprettes og hvis der eksistere en i forvejen overskrives den!\n\n    string1=input(\"Indtast dit fornavn?\")\n    string1=string1+\"\\n\" # \\n laver en ny line i filen\n    f.write(string1) #string1 skrives til filen\n    f.close() # Filen lukkes ned\n\n    f = open(File_navn, \"a\") # Filen åbnes og nu kan der adder noget tekst til den\n    string2=input(\"Indtast dit efternavn?\")\n    string2=string2+\"\\n\"+\"Filens navn er:\"+File_navn # \\n laver en ny line i filen\n    f.write(string2)\n    f.close()\n\n#Åben filen som er i projektmappe og se om den indeholder den tekst du skrev.\n"
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..File_write import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Her er et eksempel på hvordan en file oprettes og der kan skrives til den(append). Husk at lukke file hver gang der skrevet til den!!!</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Opgave1",
          "stepic_id" : 1215167,
          "update_date" : "Apr 09, 2020 08:34:01 AM",
          "files" : {
            "task.py" : {
              "name" : "task.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/test_task.py" : {
              "name" : "tests/test_task.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import unittest\n\nfrom ..task import sum\n\n\n# todo: replace this with an actual test\nclass TestCase(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(sum(1, 2), 3, msg=\"adds 1 + 2 to equal 3\")\n"
            },
            "__init__.py" : {
              "name" : "__init__.py",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : ""
            },
            "tests/__init__.py" : {
              "name" : "tests/__init__.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html>\n<p>Tilføj til dit lyskryds program at der skrives tidspunkt og tilstand til en file hver gang lyskrydset skifter?</p>\n</html>\n",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "unit_id" : 320535,
      "type" : "lesson"
    }
  ],
  "authors" : [
    "Lasse Kaae"
  ],
  "summary" : "Python kursus til Modul 2.1 2020\nCreated: Feb 25, 2020, 9:19:43 AM.",
  "programming_language" : "Python",
  "language" : "en",
  "environment" : "unittest",
  "additional_files" : [
    {
      "name" : "Opgave 2/__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    }
  ],
  "course_type" : "PyCharm",
  "version" : 11
}